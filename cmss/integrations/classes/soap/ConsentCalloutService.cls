//Generated by FuseIT WSDL2Apex (http://www.fuseit.com/Solutions/SFDC-Explorer/Help-WSDL-Parser.aspx)
//Methods Included: enableInternalConsent, disableInternalConsent, disableInternalConsentForPerson, getGeneralConsentByIdNumber, enableGeneralConsent, disableGeneralConsent, enableChannelConsent, disableChannelConsent
// Primary Port Class Name: ConsentServicePort	
public class ConsentCalloutService {
	private static final String DT_NS = 'http://service.cmss.cz/person/ConsentService/v01/datatypes';

	public class ConsentServicePort {
		public String endpoint_x = IntegrationSettings__c.getOrgDefaults().ConsentServiceEndpoint__c + '/ConsentServiceWeb_v01/ConsentService';

		private DOM.XmlNode populateDoc(DOM.Document doc) {
			String env = 'http://schemas.xmlsoap.org/soap/envelope/';
			String dat = 'http://service.cmss.cz/person/ConsentService/v01/datatypes';
			String v01 = 'http://service.cmss.cz/common/CommonMessage/v01';

			DOM.XmlNode envelope = doc.createRootElement('Envelope', env, 'soapenv');
			envelope.setNamespace('dat', dat);
			envelope.setNamespace('v01', v01);
			DOM.XmlNode header = envelope.addChildElement('Header', env, 'soapenv');
			new SOAPCommonTypes.OutboundHttpHeader().addWssToHeader(
				header,
				IntegrationSettings__c.getOrgDefaults().ConsentServiceUsername__c,
				IntegrationSettings__c.getOrgDefaults().ConsentServicePassword__c
			);
			DOM.XmlNode body = envelope.addChildElement('Body', env, 'soapenv');
			return body;
		}

		public ConsentDataTypesService.DisableChannelConsentResponseBodyType disableChannelConsent_Http(CommonMessageService.RequestHeader requestHeader, ConsentDataTypesService.DisableChannelConsentRequestBodyType requestBody) {
			DOM.Document doc = new DOM.Document();
			DOM.XmlNode body = populateDoc(doc);
			DOM.XmlNode methodNode = body.addChildElement('DisableChannelConsentRequest', DT_NS, 'dat');
			ConsentDataTypesService.DisableChannelConsentRequestType request_x = new ConsentDataTypesService.DisableChannelConsentRequestType(requestHeader, requestBody);
			request_x.populateXmlNode(methodNode);

			HttpRequest req = new HttpRequest();
			req.setEndpoint(endpoint_x);
			req.setMethod('POST');
			req.setHeader('Content-Type', 'text/xml; charset=UTF-8');
			req.setHeader('SOAPAction', 'http://service.cmss.cz/person/ConsentService/v01/disableChannelConsent');
			System.debug(doc.toXmlString());
			req.setBodyDocument(doc);
			Logger.debug('Outgoing request', Logger.serializeHttpRequest(req));
			Http http = new Http();
			HttpResponse res = http.send(req);
			System.debug(res.getBody());
			Logger.debug('Incoming response', Logger.serializeHttpResponse(res));
			Dom.Document responseDoc = res.getBodyDocument();
			Dom.XmlNode rootNode = responseDoc.getRootElement();
			Dom.XmlNode bodyNode = rootNode.getChildElement('Body', 'http://schemas.xmlsoap.org/soap/envelope/');
			Dom.XmlNode DisableChannelConsentResponseNode = bodyNode.getChildElement('DisableChannelConsentResponse', 'http://service.cmss.cz/person/ConsentService/v01/datatypes');
			if (DisableChannelConsentResponseNode != null) {
				ConsentDataTypesService.DisableChannelConsentResponseType response_x = new ConsentDataTypesService.DisableChannelConsentResponseType(DisableChannelConsentResponseNode);
				return response_x.responseBody;
			}
			return null;
		}

		public ConsentDataTypesService.DisableInternalConsentResponseBodyType disableInternalConsent_Http(CommonMessageService.RequestHeader requestHeader, ConsentDataTypesService.DisableInternalConsentRequestBodyType requestBody) {
			DOM.Document doc = new DOM.Document();
			DOM.XmlNode body = populateDoc(doc);
			DOM.XmlNode methodNode = body.addChildElement('DisableInternalConsentRequest', DT_NS, 'dat');
			ConsentDataTypesService.DisableInternalConsentRequestType request_x = new ConsentDataTypesService.DisableInternalConsentRequestType(requestHeader, requestBody);
			request_x.populateXmlNode(methodNode);

			HttpRequest req = new HttpRequest();
			req.setEndpoint(endpoint_x);
			req.setMethod('POST');
			req.setHeader('Content-Type', 'text/xml; charset=UTF-8');
			req.setHeader('SOAPAction', 'http://service.cmss.cz/person/ConsentService/v01/disableInternalConsent');
			System.debug(doc.toXmlString());
			req.setBodyDocument(doc);
			Logger.debug('Outgoing request', Logger.serializeHttpRequest(req));
			Http http = new Http();
			HttpResponse res = http.send(req);
			System.debug(res.getBody());
			Logger.debug('Incoming response', Logger.serializeHttpResponse(res));
			Dom.Document responseDoc = res.getBodyDocument();
			Dom.XmlNode rootNode = responseDoc.getRootElement();
			Dom.XmlNode bodyNode = rootNode.getChildElement('Body', 'http://schemas.xmlsoap.org/soap/envelope/');
			Dom.XmlNode DisableInternalConsentResponseNode = bodyNode.getChildElement('DisableInternalConsentResponse', 'http://service.cmss.cz/person/ConsentService/v01/datatypes');
			if (DisableInternalConsentResponseNode != null) {
				ConsentDataTypesService.DisableInternalConsentResponseType response_x = new ConsentDataTypesService.DisableInternalConsentResponseType(DisableInternalConsentResponseNode);
				return response_x.responseBody;
			}
			return null;
		}

		public ConsentDataTypesService.EnableGeneralConsentResponseBodyType enableGeneralConsent_Http(CommonMessageService.RequestHeader requestHeader, ConsentDataTypesService.EnableGeneralConsentRequestBodyType requestBody) {
			DOM.Document doc = new DOM.Document();
			DOM.XmlNode body = populateDoc(doc);
			DOM.XmlNode methodNode = body.addChildElement('EnableGeneralConsentRequest', DT_NS, 'dat');
			ConsentDataTypesService.EnableGeneralConsentRequestType request_x = new ConsentDataTypesService.EnableGeneralConsentRequestType(requestHeader, requestBody);
			request_x.populateXmlNode(methodNode);

			HttpRequest req = new HttpRequest();
			req.setEndpoint(endpoint_x);
			req.setMethod('POST');
			req.setHeader('Content-Type', 'text/xml; charset=UTF-8');
			req.setHeader('SOAPAction', 'http://service.cmss.cz/person/ConsentService/v01/enableGeneralConsent');
			System.debug(doc.toXmlString());
			req.setBodyDocument(doc);
			Logger.debug('Outgoing request', Logger.serializeHttpRequest(req));
			Http http = new Http();
			HttpResponse res = http.send(req);
			System.debug(res.getBody());
			Logger.debug('Incoming response', Logger.serializeHttpResponse(res));
			Dom.Document responseDoc = res.getBodyDocument();
			Dom.XmlNode rootNode = responseDoc.getRootElement();
			Dom.XmlNode bodyNode = rootNode.getChildElement('Body', 'http://schemas.xmlsoap.org/soap/envelope/');
			Dom.XmlNode EnableGeneralConsentResponseNode = bodyNode.getChildElement('EnableGeneralConsentResponse', 'http://service.cmss.cz/person/ConsentService/v01/datatypes');
			if (EnableGeneralConsentResponseNode != null) {
				ConsentDataTypesService.EnableGeneralConsentResponseType response_x = new ConsentDataTypesService.EnableGeneralConsentResponseType(EnableGeneralConsentResponseNode);
				return response_x.responseBody;
			}
            Dom.XmlNode faultNode = bodyNode.getChildElement('Fault', 'http://schemas.xmlsoap.org/soap/envelope/');
            if (faultNode != null) {
                Dom.XmlNode faultstringNode = faultNode.getChildElement('faultstring', null);
                ConsentDataTypesService.EnableGeneralConsentResponseType response_x = new ConsentDataTypesService.EnableGeneralConsentResponseType();
                response_x.responseBody = new ConsentDataTypesService.EnableGeneralConsentResponseBodyType();
                response_x.responseBody.responseMessage = (faultstringNode == null) ? null : faultstringNode.getText();
                return response_x.responseBody;
            }
			return null;
		}

		public ConsentDataTypesService.EnableChannelConsentResponseBodyType enableChannelConsent_Http(CommonMessageService.RequestHeader requestHeader, ConsentDataTypesService.EnableChannelConsentRequestBodyType requestBody) {
			DOM.Document doc = new DOM.Document();
			DOM.XmlNode body = populateDoc(doc);
			DOM.XmlNode methodNode = body.addChildElement('EnableChannelConsentRequest', DT_NS, 'dat');
			ConsentDataTypesService.EnableChannelConsentRequestType request_x = new ConsentDataTypesService.EnableChannelConsentRequestType(requestHeader, requestBody);
			request_x.populateXmlNode(methodNode);

			HttpRequest req = new HttpRequest();
			req.setEndpoint(endpoint_x);
			req.setMethod('POST');
			req.setHeader('Content-Type', 'text/xml; charset=UTF-8');
			req.setHeader('SOAPAction', 'http://service.cmss.cz/person/ConsentService/v01/enableChannelConsent');
			System.debug(doc.toXmlString());
			req.setBodyDocument(doc);
			Logger.debug('Outgoing request', Logger.serializeHttpRequest(req));
			Http http = new Http();
			HttpResponse res = http.send(req);
			System.debug(res.getBody());
			Logger.debug('Incoming response', Logger.serializeHttpResponse(res));
			Dom.Document responseDoc = res.getBodyDocument();
			Dom.XmlNode rootNode = responseDoc.getRootElement();
			Dom.XmlNode bodyNode = rootNode.getChildElement('Body', 'http://schemas.xmlsoap.org/soap/envelope/');
			Dom.XmlNode EnableChannelConsentResponseNode = bodyNode.getChildElement('EnableChannelConsentResponse', 'http://service.cmss.cz/person/ConsentService/v01/datatypes');
			if (EnableChannelConsentResponseNode != null) {
				ConsentDataTypesService.EnableChannelConsentResponseType response_x = new ConsentDataTypesService.EnableChannelConsentResponseType(EnableChannelConsentResponseNode);
				return response_x.responseBody;
			}
			return null;
		}

		public ConsentDataTypesService.EnableInternalConsentResponseBodyType enableInternalConsent_Http(CommonMessageService.RequestHeader requestHeader, ConsentDataTypesService.EnableInternalConsentRequestBodyType requestBody) {
			DOM.Document doc = new DOM.Document();
			DOM.XmlNode body = populateDoc(doc);
			DOM.XmlNode methodNode = body.addChildElement('EnableInternalConsentRequest', DT_NS, 'dat');
			ConsentDataTypesService.EnableInternalConsentRequestType request_x = new ConsentDataTypesService.EnableInternalConsentRequestType(requestHeader, requestBody);
			request_x.populateXmlNode(methodNode);

			HttpRequest req = new HttpRequest();
			req.setEndpoint(endpoint_x);
			req.setMethod('POST');
			req.setHeader('Content-Type', 'text/xml; charset=UTF-8');
			req.setHeader('SOAPAction', 'http://service.cmss.cz/person/ConsentService/v01/enableInternalConsent');
			System.debug(doc.toXmlString());
			req.setBodyDocument(doc);
			Logger.debug('Outgoing request', Logger.serializeHttpRequest(req));
			Http http = new Http();
			HttpResponse res = http.send(req);
			System.debug(res.getBody());
			Logger.debug('Incoming response', Logger.serializeHttpResponse(res));
			Dom.Document responseDoc = res.getBodyDocument();
			Dom.XmlNode rootNode = responseDoc.getRootElement();
			Dom.XmlNode bodyNode = rootNode.getChildElement('Body', 'http://schemas.xmlsoap.org/soap/envelope/');
			Dom.XmlNode EnableInternalConsentResponseNode = bodyNode.getChildElement('EnableInternalConsentResponse', 'http://service.cmss.cz/person/ConsentService/v01/datatypes');
			if (EnableInternalConsentResponseNode != null) {
				ConsentDataTypesService.EnableInternalConsentResponseType response_x = new ConsentDataTypesService.EnableInternalConsentResponseType(EnableInternalConsentResponseNode);
				return response_x.responseBody;
			}
			return null;
		}
	}
}
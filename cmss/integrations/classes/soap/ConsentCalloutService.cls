//Generated by FuseIT WSDL2Apex (http://www.fuseit.com/Solutions/SFDC-Explorer/Help-WSDL-Parser.aspx)
//Methods Included: enableInternalConsent, disableInternalConsent, disableInternalConsentForPerson, getGeneralConsentByIdNumber, enableGeneralConsent, disableGeneralConsent, enableChannelConsent, disableChannelConsent
public class ConsentCalloutService extends ESBService {

    private static final Map<String, String> NAMESPACES = new Map<String, String>{
            'dat' => 'http://service.cmss.cz/person/ConsentService/v01/datatypes'
    };

    public static final String ENDPOINT_PATH = '/ConsentServiceWeb_v01/ConsentService';
    private static final String DT_NS = 'http://service.cmss.cz/person/ConsentService/v01/datatypes';
    private static final String SOAP_ACTION_BASE = 'http://service.cmss.cz/person/ConsentService/v01/';

    public ConsentDataTypesService.DisableChannelConsentResponseBodyType disableChannelConsent_Http(CommonMessageService.RequestHeader requestHeader, ConsentDataTypesService.DisableChannelConsentRequestBodyType requestBody) {
        DOM.Document doc = new DOM.Document();
        DOM.XmlNode body = populateDoc(doc, NAMESPACES);
        ConsentDataTypesService.DisableChannelConsentRequestType request_x = new ConsentDataTypesService.DisableChannelConsentRequestType(requestHeader, requestBody);
        DOM.XmlNode methodNode = body.addChildElement('DisableChannelConsentRequest', DT_NS, 'dat');
        request_x.populateXmlNode(methodNode);

        HttpResponse res = new Callout(this.ENDPOINT_BASE + ENDPOINT_PATH)
                .setClientCertificateName(CERTIFICATE_NAME)
                .setHeader('SOAPAction', SOAP_ACTION_BASE + 'disableChannelConsent')
                .post(doc);
        Logger.saveLogs();

        Dom.XmlNode bodyNode = getResponseBody(res);
        Dom.XmlNode DisableChannelConsentResponseNode = bodyNode.getChildElement('DisableChannelConsentResponse', DT_NS);
        if (DisableChannelConsentResponseNode != null) {
            ConsentDataTypesService.DisableChannelConsentResponseType response_x = new ConsentDataTypesService.DisableChannelConsentResponseType(DisableChannelConsentResponseNode);
            return response_x.responseBody;
        }
        return null;
    }

    public ConsentDataTypesService.DisableInternalConsentResponseBodyType disableInternalConsent_Http(CommonMessageService.RequestHeader requestHeader, ConsentDataTypesService.DisableInternalConsentRequestBodyType requestBody) {
        DOM.Document doc = new DOM.Document();
        DOM.XmlNode body = populateDoc(doc, NAMESPACES);
        ConsentDataTypesService.DisableInternalConsentRequestType request_x = new ConsentDataTypesService.DisableInternalConsentRequestType(requestHeader, requestBody);
        DOM.XmlNode methodNode = body.addChildElement('DisableInternalConsentRequest', DT_NS, 'dat');
        request_x.populateXmlNode(methodNode);

        HttpResponse res = new Callout(this.ENDPOINT_BASE + ENDPOINT_PATH)
                .setClientCertificateName(CERTIFICATE_NAME)
                .setHeader('SOAPAction', SOAP_ACTION_BASE + 'disableInternalConsent')
                .post(doc);
        Logger.saveLogs();

        Dom.XmlNode bodyNode = getResponseBody(res);
        Dom.XmlNode DisableInternalConsentResponseNode = bodyNode.getChildElement('DisableInternalConsentResponse', DT_NS);
        if (DisableInternalConsentResponseNode != null) {
            ConsentDataTypesService.DisableInternalConsentResponseType response_x = new ConsentDataTypesService.DisableInternalConsentResponseType(DisableInternalConsentResponseNode);
            return response_x.responseBody;
        }
        return null;
    }

    public ConsentDataTypesService.EnableGeneralConsentResponseBodyType enableGeneralConsent_Http(CommonMessageService.RequestHeader requestHeader, ConsentDataTypesService.EnableGeneralConsentRequestBodyType requestBody) {
        DOM.Document doc = new DOM.Document();
        DOM.XmlNode body = populateDoc(doc, NAMESPACES);
        ConsentDataTypesService.EnableGeneralConsentRequestType request_x = new ConsentDataTypesService.EnableGeneralConsentRequestType(requestHeader, requestBody);
        DOM.XmlNode methodNode = body.addChildElement('EnableGeneralConsentRequest', DT_NS, 'dat');
        request_x.populateXmlNode(methodNode);

        HttpResponse res = new Callout(this.ENDPOINT_BASE + ENDPOINT_PATH)
                .setClientCertificateName(CERTIFICATE_NAME)
                .setHeader('SOAPAction', SOAP_ACTION_BASE + 'enableGeneralConsent')
                .post(doc);
        Logger.saveLogs();

        Dom.XmlNode bodyNode = getResponseBody(res);
        Dom.XmlNode EnableGeneralConsentResponseNode = bodyNode.getChildElement('EnableGeneralConsentResponse', DT_NS);
        if (EnableGeneralConsentResponseNode != null) {
            ConsentDataTypesService.EnableGeneralConsentResponseType response_x = new ConsentDataTypesService.EnableGeneralConsentResponseType(EnableGeneralConsentResponseNode);
            return response_x.responseBody;
        }
        Dom.XmlNode faultNode = bodyNode.getChildElement('Fault', 'http://schemas.xmlsoap.org/soap/envelope/');
        if (faultNode != null) {
            Dom.XmlNode faultstringNode = faultNode.getChildElement('faultstring', null);
            ConsentDataTypesService.EnableGeneralConsentResponseType response_x = new ConsentDataTypesService.EnableGeneralConsentResponseType();
            response_x.responseBody = new ConsentDataTypesService.EnableGeneralConsentResponseBodyType();
            response_x.responseBody.responseMessage = (faultstringNode == null) ? null : faultstringNode.getText();
            return response_x.responseBody;
        }
        return null;
    }

    public ConsentDataTypesService.EnableChannelConsentResponseBodyType enableChannelConsent_Http(CommonMessageService.RequestHeader requestHeader, ConsentDataTypesService.EnableChannelConsentRequestBodyType requestBody) {
        DOM.Document doc = new DOM.Document();
        DOM.XmlNode body = populateDoc(doc, NAMESPACES);
        ConsentDataTypesService.EnableChannelConsentRequestType request_x = new ConsentDataTypesService.EnableChannelConsentRequestType(requestHeader, requestBody);
        DOM.XmlNode methodNode = body.addChildElement('EnableChannelConsentRequest', DT_NS, 'dat');
        request_x.populateXmlNode(methodNode);

        HttpResponse res = new Callout(this.ENDPOINT_BASE + ENDPOINT_PATH)
                .setClientCertificateName(CERTIFICATE_NAME)
                .setHeader('SOAPAction', SOAP_ACTION_BASE + 'enableChannelConsent')
                .post(doc);
        Logger.saveLogs();

        Dom.XmlNode bodyNode = getResponseBody(res);
        Dom.XmlNode EnableChannelConsentResponseNode = bodyNode.getChildElement('EnableChannelConsentResponse', DT_NS);
        if (EnableChannelConsentResponseNode != null) {
            ConsentDataTypesService.EnableChannelConsentResponseType response_x = new ConsentDataTypesService.EnableChannelConsentResponseType(EnableChannelConsentResponseNode);
            return response_x.responseBody;
        }
        return null;
    }

    public ConsentDataTypesService.EnableInternalConsentResponseBodyType enableInternalConsent_Http(CommonMessageService.RequestHeader requestHeader, ConsentDataTypesService.EnableInternalConsentRequestBodyType requestBody) {
        DOM.Document doc = new DOM.Document();
        DOM.XmlNode body = populateDoc(doc, NAMESPACES);
        ConsentDataTypesService.EnableInternalConsentRequestType request_x = new ConsentDataTypesService.EnableInternalConsentRequestType(requestHeader, requestBody);
        DOM.XmlNode methodNode = body.addChildElement('EnableInternalConsentRequest', DT_NS, 'dat');
        request_x.populateXmlNode(methodNode);

        HttpResponse res = new Callout(this.ENDPOINT_BASE + ENDPOINT_PATH)
                .setClientCertificateName(CERTIFICATE_NAME)
                .setHeader('SOAPAction', SOAP_ACTION_BASE + 'enableInternalConsent')
                .post(doc);
        Logger.saveLogs();

        Dom.XmlNode bodyNode = getResponseBody(res);
        Dom.XmlNode EnableInternalConsentResponseNode = bodyNode.getChildElement('EnableInternalConsentResponse', DT_NS);
        if (EnableInternalConsentResponseNode != null) {
            ConsentDataTypesService.EnableInternalConsentResponseType response_x = new ConsentDataTypesService.EnableInternalConsentResponseType(EnableInternalConsentResponseNode);
            return response_x.responseBody;
        }
        return null;
    }

    public ConsentDataTypesService.DisableGeneralConsentResponseBodyType disableGeneralConsent_Http(CommonMessageService.RequestHeader requestHeader, ConsentDataTypesService.DisableGeneralConsentRequestBodyType requestBody) {
        DOM.Document doc = new DOM.Document();
        DOM.XmlNode body = populateDoc(doc, NAMESPACES);
        ConsentDataTypesService.DisableGeneralConsentRequestType request_x = new ConsentDataTypesService.DisableGeneralConsentRequestType(requestHeader, requestBody);
        DOM.XmlNode methodNode = body.addChildElement('DisableGeneralConsentRequest', DT_NS, 'dat');
        request_x.populateXmlNode(methodNode);

        HttpResponse res = new Callout(this.ENDPOINT_BASE + ENDPOINT_PATH)
                .setClientCertificateName(CERTIFICATE_NAME)
                .setHeader('SOAPAction', SOAP_ACTION_BASE + 'disableGeneralConsent')
                .post(doc);
        Logger.saveLogs();

        Dom.XmlNode bodyNode = getResponseBody(res);
        Dom.XmlNode DisableGeneralConsentResponseNode = bodyNode.getChildElement('DisableGeneralConsentResponse', DT_NS);
        if (DisableGeneralConsentResponseNode != null) {
            ConsentDataTypesService.DisableGeneralConsentResponseType response_x = new ConsentDataTypesService.DisableGeneralConsentResponseType(DisableGeneralConsentResponseNode);
            return response_x.responseBody;
        }
        Dom.XmlNode faultNode = bodyNode.getChildElement('Fault', 'http://schemas.xmlsoap.org/soap/envelope/');
        if (faultNode != null) {
            Dom.XmlNode faultstringNode = faultNode.getChildElement('faultstring', null);
            ConsentDataTypesService.DisableGeneralConsentResponseType response_x = new ConsentDataTypesService.DisableGeneralConsentResponseType();
            response_x.responseBody = new ConsentDataTypesService.DisableGeneralConsentResponseBodyType();
            response_x.responseBody.responseMessage = (faultstringNode == null) ? null : faultstringNode.getText();
            return response_x.responseBody;
        }
        return null;
    }

    private Dom.XmlNode getResponseBody(HttpResponse res) {
        Dom.Document responseDoc = res.getBodyDocument();
        Dom.XmlNode rootNode = responseDoc.getRootElement();
        return rootNode.getChildElement('Body', 'http://schemas.xmlsoap.org/soap/envelope/');
    }
}
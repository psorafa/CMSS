//Generated by FuseIT WSDL2Apex (http://www.fuseit.com/Solutions/SFDC-Explorer/Help-WSDL-Parser.aspx)

@isTest
public class ConsentCalloutServiceMockImpl implements HttpCalloutMock {

    protected Integer code;
    protected String status;
    protected String bodyAsString;
    protected Blob bodyAsBlob;
    protected Map<String, String> responseHeaders;

    public ConsentCalloutServiceMockImpl(Integer code, String status, String body, Map<String, String> responseHeaders) {
        this.code = code;
        this.status = status;
        this.bodyAsString = body;
        this.bodyAsBlob = null;
        this.responseHeaders = responseHeaders;
    }

    public ConsentCalloutServiceMockImpl(Integer code, String status, Blob body, Map<String, String> responseHeaders) {
        this.code = code;
        this.status = status;
        this.bodyAsBlob = body;
        this.bodyAsString = null;
        this.responseHeaders = responseHeaders;
    }

    public HTTPResponse respond(HTTPRequest req) {
        HttpResponse resp = new HttpResponse();
        resp.setStatusCode(code);
        resp.setStatus(status);
        if (bodyAsBlob != null) {
            resp.setBodyAsBlob(bodyAsBlob);
        } else {
            resp.setBody(bodyAsString);
        }

        if (responseHeaders != null) {
            for (String key : responseHeaders.keySet()) {
                resp.setHeader(key, responseHeaders.get(key));
            }
        }
        return resp;
    }
    
	/*public void doInvoke(
			Object stub,
			Object request,
			Map<String, Object> response,
			String endpoint,
			String soapAction,
			String requestName,
			String responseNS,
			String responseName,
			String responseType) {
       
		System.debug(LoggingLevel.INFO, 'ConsentCalloutServiceMockImpl.doInvoke() - ' +
			'\n request: ' + request +
			'\n response: ' + response +
			'\n endpoint: ' + endpoint +
			'\n soapAction: ' + soapAction +
			'\n requestName: ' + requestName +
			'\n responseNS: ' + responseNS +
			'\n responseName: ' + responseName +
			'\n responseType: ' + responseType);

		if(request instanceOf ConsentDataTypesService.DisableGeneralConsentRequestType) {
			response.put( 'response_x', new ConsentDataTypesService.DisableGeneralConsentResponseType());
		}
		else if(request instanceOf ConsentDataTypesService.DisableChannelConsentRequestType) {
			response.put( 'response_x', new ConsentDataTypesService.DisableChannelConsentResponseType());
		}
		else if(request instanceOf ConsentDataTypesService.DisableInternalConsentRequestType) {
			response.put( 'response_x', new ConsentDataTypesService.DisableInternalConsentResponseType());
		}
		else if(request instanceOf ConsentDataTypesService.DisableInternalConsentForPersonRequestType) {
			response.put( 'response_x', new ConsentDataTypesService.DisableInternalConsentForPersonResponseType());
		}
		else if(request instanceOf ConsentDataTypesService.EnableGeneralConsentRequestType) {
			response.put( 'response_x', new ConsentDataTypesService.EnableGeneralConsentResponseType());
		}
		else if(request instanceOf ConsentDataTypesService.EnableChannelConsentRequestType) {
			response.put( 'response_x', new ConsentDataTypesService.EnableChannelConsentResponseType());
		}
		else if(request instanceOf ConsentDataTypesService.EnableInternalConsentRequestType) {
			response.put( 'response_x', new ConsentDataTypesService.EnableInternalConsentResponseType());
		}
		else if(request instanceOf ConsentDataTypesService.GetGeneralConsentByIdNumberRequestType) {
			response.put( 'response_x', new ConsentDataTypesService.GetGeneralConsentByIdNumberResponseType());
		}
	}*/
}

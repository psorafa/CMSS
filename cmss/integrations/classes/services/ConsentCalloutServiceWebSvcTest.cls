//Generated by FuseIT WSDL2Apex (http://www.fuseit.com/Solutions/SFDC-Explorer/Help-WSDL-Parser.aspx)

@isTest
private class ConsentCalloutServiceWebSvcTest {
	
	/*@isTest static void coverGeneratedCodeTypes() {
		Test.setMock(WebServiceMock.class, new ConsentCalloutServiceMockImpl());
		ConsentCalloutService parentObject = new ConsentCalloutService();
		DOM.Document doc = new DOM.Document();
		DOM.XmlNode mockNode = doc.createRootElement('Envelope', 'http://schemas.xmlsoap.org/soap/envelope/', 'env');
		new ConsentDataTypesService.DisableChannelConsentRequestBodyType(mockNode);				
		new ConsentDataTypesService.DisableChannelConsentResponseBodyType(mockNode);				
		new ConsentDataTypesService.DisableChannelConsentResponseType(mockNode);				
		new ConsentDataTypesService.DisableGeneralConsentRequestBodyType(mockNode);				
		new ConsentDataTypesService.DisableGeneralConsentResponseBodyType(mockNode);				
		new ConsentDataTypesService.DisableGeneralConsentResponseType(mockNode);				
		new ConsentDataTypesService.DisableInternalConsentForPersonRequestBodyType(mockNode);				
		new ConsentDataTypesService.DisableInternalConsentForPersonResponseBodyType(mockNode);				
		new ConsentDataTypesService.DisableInternalConsentForPersonResponseType(mockNode);				
		new ConsentDataTypesService.DisableInternalConsentRequestBodyType(mockNode);				
		new ConsentDataTypesService.DisableInternalConsentResponseBodyType(mockNode);				
		new ConsentDataTypesService.DisableInternalConsentResponseType(mockNode);				
		new ConsentDataTypesService.EnableChannelConsentRequestBodyType(mockNode);				
		new ConsentDataTypesService.EnableChannelConsentResponseBodyType(mockNode);				
		new ConsentDataTypesService.EnableChannelConsentResponseType(mockNode);				
		new ConsentDataTypesService.EnableGeneralConsentRequestBodyType(mockNode);				
		new ConsentDataTypesService.EnableGeneralConsentResponseBodyType(mockNode);				
		new ConsentDataTypesService.EnableGeneralConsentResponseType(mockNode);				
		new ConsentDataTypesService.EnableInternalConsentRequestBodyType(mockNode);				
		new ConsentDataTypesService.EnableInternalConsentResponseBodyType(mockNode);				
		new ConsentDataTypesService.EnableInternalConsentResponseType(mockNode);				
		new ConsentDataTypesService.GetGeneralConsentByIdNumberRequestBodyType(mockNode);				
		new ConsentDataTypesService.GetGeneralConsentByIdNumberResponseBodyType(mockNode);				
		new ConsentDataTypesService.GetGeneralConsentByIdNumberResponseType(mockNode);				
		new CommonMessageService.Header(mockNode);				
		new CommonMessageService.RequestHeader(mockNode);				
		new CommonMessageService.RequestMessage(mockNode);				
		new CommonMessageService.ResponseHeader(mockNode);				
		new CommonMessageService.ResponseMessage(mockNode);				
		new BasicTypesService.OperationSuccessType(mockNode);				
		ConsentDataTypesService.DisableChannelConsentRequestBodyType Obj1 = new ConsentDataTypesService.DisableChannelConsentRequestBodyType();
		Obj1.populateXmlNode(mockNode);
		ConsentDataTypesService.ParseDateTime('2014-11-05T13:15:30Z');
		ConsentDataTypesService.DisableChannelConsentRequestType Obj2 = new ConsentDataTypesService.DisableChannelConsentRequestType();
		Obj2.populateXmlNode(mockNode);
		ConsentDataTypesService.DisableChannelConsentResponseBodyType Obj3 = new ConsentDataTypesService.DisableChannelConsentResponseBodyType();
		Obj3.populateXmlNode(mockNode);
		new ConsentDataTypesService.DisableChannelConsentResponseType();
		ConsentDataTypesService.DisableGeneralConsentRequestBodyType Obj5 = new ConsentDataTypesService.DisableGeneralConsentRequestBodyType();
		Obj5.populateXmlNode(mockNode);
		ConsentDataTypesService.DisableGeneralConsentRequestType Obj6 = new ConsentDataTypesService.DisableGeneralConsentRequestType();
		Obj6.populateXmlNode(mockNode);
		ConsentDataTypesService.DisableGeneralConsentResponseBodyType Obj7 = new ConsentDataTypesService.DisableGeneralConsentResponseBodyType();
		Obj7.populateXmlNode(mockNode);
		new ConsentDataTypesService.DisableGeneralConsentResponseType();
		ConsentDataTypesService.DisableInternalConsentForPersonRequestBodyType Obj9 = new ConsentDataTypesService.DisableInternalConsentForPersonRequestBodyType();
		Obj9.populateXmlNode(mockNode);
		ConsentDataTypesService.DisableInternalConsentForPersonRequestType Obj10 = new ConsentDataTypesService.DisableInternalConsentForPersonRequestType();
		Obj10.populateXmlNode(mockNode);
		ConsentDataTypesService.DisableInternalConsentForPersonResponseBodyType Obj11 = new ConsentDataTypesService.DisableInternalConsentForPersonResponseBodyType();
		Obj11.populateXmlNode(mockNode);
		new ConsentDataTypesService.DisableInternalConsentForPersonResponseType();
		ConsentDataTypesService.DisableInternalConsentRequestBodyType Obj13 = new ConsentDataTypesService.DisableInternalConsentRequestBodyType();
		Obj13.populateXmlNode(mockNode);
		ConsentDataTypesService.DisableInternalConsentRequestType Obj14 = new ConsentDataTypesService.DisableInternalConsentRequestType();
		Obj14.populateXmlNode(mockNode);
		ConsentDataTypesService.DisableInternalConsentResponseBodyType Obj15 = new ConsentDataTypesService.DisableInternalConsentResponseBodyType();
		Obj15.populateXmlNode(mockNode);
		new ConsentDataTypesService.DisableInternalConsentResponseType();
		ConsentDataTypesService.EnableChannelConsentRequestBodyType Obj17 = new ConsentDataTypesService.EnableChannelConsentRequestBodyType();
		Obj17.populateXmlNode(mockNode);
		ConsentDataTypesService.EnableChannelConsentRequestType Obj18 = new ConsentDataTypesService.EnableChannelConsentRequestType();
		Obj18.populateXmlNode(mockNode);
		ConsentDataTypesService.EnableChannelConsentResponseBodyType Obj19 = new ConsentDataTypesService.EnableChannelConsentResponseBodyType();
		Obj19.populateXmlNode(mockNode);
		new ConsentDataTypesService.EnableChannelConsentResponseType();
		ConsentDataTypesService.EnableGeneralConsentRequestBodyType Obj21 = new ConsentDataTypesService.EnableGeneralConsentRequestBodyType();
		Obj21.populateXmlNode(mockNode);
		ConsentDataTypesService.EnableGeneralConsentRequestType Obj22 = new ConsentDataTypesService.EnableGeneralConsentRequestType();
		Obj22.populateXmlNode(mockNode);
		ConsentDataTypesService.EnableGeneralConsentResponseBodyType Obj23 = new ConsentDataTypesService.EnableGeneralConsentResponseBodyType();
		Obj23.populateXmlNode(mockNode);
		new ConsentDataTypesService.EnableGeneralConsentResponseType();
		ConsentDataTypesService.EnableInternalConsentRequestBodyType Obj25 = new ConsentDataTypesService.EnableInternalConsentRequestBodyType();
		Obj25.populateXmlNode(mockNode);
		ConsentDataTypesService.EnableInternalConsentRequestType Obj26 = new ConsentDataTypesService.EnableInternalConsentRequestType();
		Obj26.populateXmlNode(mockNode);
		ConsentDataTypesService.EnableInternalConsentResponseBodyType Obj27 = new ConsentDataTypesService.EnableInternalConsentResponseBodyType();
		Obj27.populateXmlNode(mockNode);
		new ConsentDataTypesService.EnableInternalConsentResponseType();
		ConsentDataTypesService.GetGeneralConsentByIdNumberRequestBodyType Obj29 = new ConsentDataTypesService.GetGeneralConsentByIdNumberRequestBodyType();
		Obj29.populateXmlNode(mockNode);
		ConsentDataTypesService.GetGeneralConsentByIdNumberRequestType Obj30 = new ConsentDataTypesService.GetGeneralConsentByIdNumberRequestType();
		Obj30.populateXmlNode(mockNode);
		ConsentDataTypesService.GetGeneralConsentByIdNumberResponseBodyType Obj31 = new ConsentDataTypesService.GetGeneralConsentByIdNumberResponseBodyType();
		Obj31.populateXmlNode(mockNode);
		new ConsentDataTypesService.GetGeneralConsentByIdNumberResponseType();
		CommonMessageService.Header Obj33 = new CommonMessageService.Header();
		Obj33.populateXmlNode(mockNode);
		CommonMessageService.ParseDateTime('2014-11-05T13:15:30Z');
		CommonMessageService.RequestHeader Obj34 = new CommonMessageService.RequestHeader();
		Obj34.populateXmlNode(mockNode);
		CommonMessageService.RequestMessage Obj35 = new CommonMessageService.RequestMessage();
		Obj35.populateXmlNode(mockNode);
		CommonMessageService.ResponseHeader Obj36 = new CommonMessageService.ResponseHeader();
		Obj36.populateXmlNode(mockNode);
		CommonMessageService.ResponseMessage Obj37 = new CommonMessageService.ResponseMessage();
		Obj37.populateXmlNode(mockNode);
		BasicTypesService.OperationSuccessType Obj38 = new BasicTypesService.OperationSuccessType();
		Obj38.populateXmlNode(mockNode);
	}
	@isTest static void coverCodeFordisableGeneralConsent_Http(){
		Test.setMock(HttpCalloutMock.class, new ConsentCalloutServiceMockImpl());
		ConsentCalloutService.ConsentServicePort testObject = new ConsentCalloutService.ConsentServicePort();
		System.assertEquals(null, testObject.disableGeneralConsent_Http(null, null));		
	}
	@isTest static void coverCodeFordisableChannelConsent_Http(){
		Test.setMock(HttpCalloutMock.class, new ConsentCalloutServiceMockImpl());
		ConsentCalloutService.ConsentServicePort testObject = new ConsentCalloutService.ConsentServicePort();
		System.assertEquals(null, testObject.disableChannelConsent_Http(null, null));		
	}
	@isTest static void coverCodeFordisableInternalConsent_Http(){
		Test.setMock(HttpCalloutMock.class, new ConsentCalloutServiceMockImpl());
		ConsentCalloutService.ConsentServicePort testObject = new ConsentCalloutService.ConsentServicePort();
		System.assertEquals(null, testObject.disableInternalConsent_Http(null, null));		
	}
	@isTest static void coverCodeFordisableInternalConsentForPerson_Http(){
		Test.setMock(HttpCalloutMock.class, new ConsentCalloutServiceMockImpl());
		ConsentCalloutService.ConsentServicePort testObject = new ConsentCalloutService.ConsentServicePort();
		System.assertEquals(null, testObject.disableInternalConsentForPerson_Http(null, null));		
	}
	@isTest static void coverCodeForenableGeneralConsent_Http(){
		Test.setMock(HttpCalloutMock.class, new ConsentCalloutServiceMockImpl());
		ConsentCalloutService.ConsentServicePort testObject = new ConsentCalloutService.ConsentServicePort();
		System.assertEquals(null, testObject.enableGeneralConsent_Http(null, null));		
	}
	@isTest static void coverCodeForenableChannelConsent_Http(){
		Test.setMock(HttpCalloutMock.class, new ConsentCalloutServiceMockImpl());
		ConsentCalloutService.ConsentServicePort testObject = new ConsentCalloutService.ConsentServicePort();
		System.assertEquals(null, testObject.enableChannelConsent_Http(null, null));		
	}
	@isTest static void coverCodeForenableInternalConsent_Http(){
		Test.setMock(HttpCalloutMock.class, new ConsentCalloutServiceMockImpl());
		ConsentCalloutService.ConsentServicePort testObject = new ConsentCalloutService.ConsentServicePort();
		System.assertEquals(null, testObject.enableInternalConsent_Http(null, null));		
	}
	@isTest static void coverCodeForgetGeneralConsentByIdNumber_Http(){
		Test.setMock(HttpCalloutMock.class, new ConsentCalloutServiceMockImpl());
		ConsentCalloutService.ConsentServicePort testObject = new ConsentCalloutService.ConsentServicePort();
		System.assertEquals(null, testObject.getGeneralConsentByIdNumber_Http(null, null));		
	}*/
}